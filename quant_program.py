# -*- coding: utf-8 -*-
"""
Created on Thu Oct 11 14:34:25 2018

@author: jamesbc
"""

# -*- coding: utf-8 -*-
"""
Created on Thu Mar 29 14:09:28 2018

@author: JamesBC
"""

import pandas as pd
import seaborn as sns; sns.set(color_codes=True)
import xlsxwriter
import PySimpleGUI as sg


def best_fit(X, Y):
    '''determine the line of best fit equation, return a and b (y intercept and slope)'''
    
    xbar = sum(X)/len(X)
    ybar = sum(Y)/len(Y)
    n = len(X) # or len(Y)

    numer = sum([xi*yi for xi,yi in zip(X, Y)]) - n * xbar * ybar
    denum = sum([xi**2 for xi in X]) - n * xbar**2

    b = numer / denum
    a = ybar - b * xbar

    return a, b


def quantify(csv_files, file_path):
    
    # open the csv file (one by one  if there are more than one to be analyzed)
    for file in csv_files:
        quant_df = pd.read_csv(file)
        
        # determine the number of plates in file, and repeats
        plate_list = quant_df.Plate.unique()
        repeat_list = len(quant_df.Repeat.unique())
        
        # prompt user to fill in what the plate ID's should be (not the autogenerated names from machine)
        plate_id = [input('Project {}:  What is the plate id for plate {}?\n'.format(file, plate)) for plate in plate_list]
#        plate_id = [str(sg.PopupGetText('File: {0}\nWhat is the plate ID for plate {1}?'.format(file, plate))) for plate in plate_list]            
        plate_name = dict(zip(plate_list, plate_id))
        
        quant_avg = ['Plate', 'Well', 'Fluorescein (0.1s) (Counts)']  # only want these columns for final df
        
    
        for k, v in plate_name.items():
            '''isolate each plate by plate id into seperate dataframes'''
            
            plate_df = quant_df[quant_df['Plate'] == k]
            
            # average out the repeats for the plate (if repeats occurred in readings)
            
            if repeat_list == 2:  # if there are 2 repeats in readings
                
                # isolate repeat 1
                repeat1_df = plate_df.loc[plate_df['Repeat'] == 1]
                repeat1_df = repeat1_df[quant_avg]
                repeat1_df = repeat1_df.rename(columns={'Fluorescein (0.1s) (Counts)':'Fluorescein 1'})
                
                # isolate repeat 2
                repeat2_df = plate_df.loc[plate_df['Repeat'] == 2]
                repeat2_df = repeat2_df[quant_avg]
                repeat2_df = repeat2_df.rename(columns={'Fluorescein (0.1s) (Counts)':'Fluorescein 2'})
                
                average_df = pd.merge(left=repeat1_df, right=repeat2_df, how='left')  # merge the repeats together
                
                # add the average Fluorescein column (averaged between repeats)
                average_df['Average Fluorescein'] = average_df.apply(lambda row: 
                    (row['Fluorescein 1'] + row['Fluorescein 2'])//2, axis=1)
            
                average_df = average_df[['Plate', 'Well', 'Average Fluorescein']]
                average_df['Plate'] = average_df['Plate'].replace(k, v) # replace plate name with plate_id
                           
            
            else:  # there are no repeats in the reading, just take the one set of values as the average
                average_df = plate_df[quant_avg]
                average_df = average_df.rename(columns={'Fluorescein (0.1s) (Counts)':'Average Fluorescein'})
                average_df['Plate'] = average_df['Plate'].replace(k, v) # replace plate name with plate_id
                
            
            # get the standard curve and calculate the DNA quantity for each well
            '''standards will be located in the same wells (columns 12 of each plate) for every analysis'''
            std_df = average_df.loc[average_df['Well'].isin(['A12', 'B12', 'C12', 'D12', 'E12', 'F12', 'G12'])]
            
            #  get the X and Y coordinates for standard curve for graphing.  
            #  **future work, remove any outliers in the Y axis data if they are off by a certain percentage
            X = [0, 0.1, 1, 5, 10, 20, 50]
            Y = [y for y in std_df['Average Fluorescein']]
            
            a, b = best_fit(X, Y)  # standard curve calculation
            
            average_df['DNA Concentration'] = (average_df['Average Fluorescein'] - a) / b
            average_df['DNA Concentration'] = average_df['DNA Concentration'].round(2)
            
            # save the dataframe as a csv into the destination folder with a new name (box number)
            
            path2= 'L:/MolecularGroup/Molecular/Parkin Lab/Brian James/Genetic Diversity Program/3.  Quantification data/'
    
            # Create a Pandas Excel writer using XlsxWriter as the engine.
                        
            workbook = xlsxwriter.Workbook('{0}Box {1} Quant.xlsx'.format(path2, v))
                     
            worksheet = workbook.add_worksheet('summarized_data')
            worksheet2 = workbook.add_worksheet('standard_curve')
            bold = workbook.add_format({'bold': 1})
            
            # write the summarized data sheet
            #remove the control wells from the dataframe
            controls = ['A12', 'B12', 'C12', 'D12', 'E12', 'F12', 'G12', 'H12']
            write_df = average_df[~average_df.Well.isin(controls)]
            
            headers1 = ['box_number', 'well', 'Average Fluorescein', 'DNA Concentration']
            worksheet.write_row('A1', headers1, bold)
            worksheet.write_column('A2', write_df['Plate'])
            worksheet.write_column('B2', write_df['Well'])
            worksheet.write_column('C2', write_df['Average Fluorescein'])
            worksheet.write_column('D2', write_df['DNA Concentration'])
            
            
            # write the standard curve data and graph into new sheet on workbook
            chart = workbook.add_chart({'type': 'scatter',
                                 'subtype': 'straight_with_markers'})   
        
            headers2 = ['DNA', 'Fluorescein', 'Line equation']
           
            worksheet2.write_row('A1', headers2, bold)
            worksheet2.write_column('A2', X)
            worksheet2.write_column('B2', std_df['Average Fluorescein'])
            worksheet2.write('C2', 'y = {:.2f} + {:.2f}x'.format(a, b))
            
            
            chart = workbook.add_chart({'type': 'scatter',
                                         'subtype': 'straight_with_markers'})
            
            # Configure the first series.
            chart.add_series({
                'name':       '=standard_curve!$B$1',
                'categories': '=standard_curve!$A$2:$A$8',
                'values':     '=standard_curve!$B$2:$B$8',
            })
            
            # Add a chart title and some axis labels.
            chart.set_title ({'name': 'Standard Curve - Box {}'.format(v)})
            chart.set_x_axis({'name': 'Standard Concentration (ng/uL)'})
            chart.set_y_axis({'name': 'Average Fluorescein'})
            
            # Set an Excel chart style.
            chart.set_style(12)
            
            # Insert the chart into the worksheet (with an offset).
            worksheet2.insert_chart('B10', chart)
            
            workbook.close()
            
            # write the quant info into the bioMOB database -- work in progress
            

    log_update = 'Analyzed {} files of flourimeter data.'.format(len(csv_files))
    return log_update
    
    
